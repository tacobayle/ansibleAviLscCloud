---
- hosts: localhost
  connection: local

  vars_files:
    # - "vars/creds.json"
    - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: get Ipam DNS Profile
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: ipamdnsproviderprofile
      register: ipamDnsOutput
      tags:
        - ipamdns
        - vsHttp
        - vsDns


    - name: Retrieve domainName
      set_fact:
        domainName: "{{ item.internal_profile.dns_service_domain.0.domain_name }}"
      loop: "{{ ipamDnsOutput.obj.results }}"
      when: item.type == "IPAMDNS_TYPE_INTERNAL_DNS"
      tags:
        - ipamdns
        - vsHttp
        - vsDns

    - name: Retrieve IPAM Network details
      set_fact:
        networkUuid: "{{ item.internal_profile.usable_network_refs.0.split('/network/')[1] }}"
      loop: "{{ ipamDnsOutput.obj.results }}"
      when: item.type == "IPAMDNS_TYPE_INTERNAL"
      tags:
        - ipamdns
        - vsHttp
        - vsDns

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - ipamdns
        - vsHttp
        - vsDns

    - name: Retrieve Network details
      set_fact:
        networkName: "{{ item.name }}"
        networkMask: "{{ item.configured_subnets.0.prefix.mask }}"
        networkAddress: "{{ item.configured_subnets.0.prefix.ip_addr.addr }}"
        networkType: "{{ item.configured_subnets.0.prefix.ip_addr.type }}"
      loop: "{{ networkOutput.obj.results }}"
      when: item.uuid == networkUuid
      tags:
        - ipamdns
        - vsHttp
        - vsDns

    - name: Create vsvip for dns VS
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domainName) }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(networkName) }}"
              subnet:
                mask: "{{ item.mask | default(networkMask) }}"
                ip_addr:
                  type: "{{ item.type | default(networkType) }}"
                  addr: "{{ item.addr | default(networkAddress) }}"
      register: OutputVsDnsVip
      loop: "{{ avi_virtualservice.dns }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - avi_virtualservice.dns is defined
      tags:
        - vsVip
        - vsDns

    - name: Create vsvip for http VS
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domainName) }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(networkName) }}"
              subnet:
                mask: "{{ item.mask | default(networkMask) }}"
                ip_addr:
                  type: "{{ item.type | default(networkType) }}"
                  addr: "{{ item.addr | default(networkAddress) }}"
      register: OutputVsHttpVip
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
      tags:
        - vsvip
        - vsHttp

    - name: Create Virtualservice for DNS (based on static IP)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        services:
          - port: "{{ item.port }}"
        enable_rhi: "{{ item.enable_rhi }}"
        analytics_policy:
          udf_log_throttle: 10
          # enabled: true
          full_client_logs:
            duration: 0
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 10
          client_insights: PASSIVE
      loop: "{{ avi_virtualservice.dns }}"
      when:
        - avi_virtualservice.dns is defined
      register: OutputVsDns
      tags:
        - vsDns

    - name: Debug
      debug:
        msg: "{{ OutputVsDns.results.0.obj.uuid }}"

    - name: Update system config with DNS VS
      avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        dns_virtualservice_refs: "/api/virtualservice/?name={{ avi_virtualservice.dns.0.name }}"
      tags:
        - vsDns

    - name: Create HTTP health monitor
      avi_healthmonitor:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.0.name }}"
        http_monitor:
          http_request: "{{ item.0.http_request }}"
          http_response_code:
            - "{{ item.1 }}"
        receive_timeout: "{{ item.0.receive_timeout }}"
        failed_checks: "{{ item.0.failed_checks }}"
        send_interval: "{{ item.0.send_interval }}"
        successful_checks: "{{ item.0.successful_checks }}"
        type: "{{ item.0.type }}"
      with_subelements:
        - "{{ avi_healthmonitor }}"
        - http_response_code
      when: item.0.type == "HEALTH_MONITOR_HTTP"
      tags:
        - pool
        - vsHttp
        - hm
# nested loop needs to be used for httt_response_code
# one task needs to be define per health monitor type

    - name: Create pool with server(s)
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ item.0.cloud_ref | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        lb_algorithm: "{{ item.0.lb_algorithm }}"
        health_monitor_refs:
         - "/api/healthmonitor?name={{ item.0.health_monitor_refs }}"
        servers:
          - ip:
               addr: "{{ item.1.ip.addr }}"
               type: "{{ item.1.ip.type }}"
      with_subelements:
        - "{{ avi_pool }}"
        - servers
      when:
        - avi_pool is defined
      tags:
        - pool
        - vsHttp


    - name: Create HTTP Virtualservice (based on Dynamic IP - Ipam)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
          # - port: "{{ item.port }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        analytics_policy:
          udf_log_throttle: 10
          # enabled: true
          full_client_logs:
            duration: 0
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 10
          client_insights: PASSIVE
      loop: "{{ avi_virtualservice.http }}"
      register: OutputVsHttp
      tags:
        - vsHttp

    - name: Debug
      debug:
        msg: "{{ OutputVsHttp.results.1.obj.uuid }}"
      tags:
        - vsHttp

    - name: Wait for the VS Http to be ready
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: statusVs
      until: statusVs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 120
      delay: 10
      when: avi_virtualservice.http is defined
      tags:
        - vsHttp
